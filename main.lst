                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.3.3 Fri May 10 15:03:18 2019
                              4 
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _do_the_stuff
                             13 	.globl _print_the_stuff
                             14 	.globl _dec_to_int
                             15 	.globl _oct_to_int
                             16 	.globl _hex_to_int
                             17 	.globl _power
                             18 	.globl _putchar
                             19 	.globl _getchar
                             20 	.globl _dec_to_int_PARM_2
                             21 	.globl _oct_to_int_PARM_2
                             22 	.globl _hex_to_int_PARM_2
                             23 	.globl _power_PARM_2
                             24 ;--------------------------------------------------------
                             25 ; special function registers
                             26 ;--------------------------------------------------------
                    0080     27 _P0	=	0x0080
                    0081     28 _SP	=	0x0081
                    0082     29 _DPL	=	0x0082
                    0083     30 _DPH	=	0x0083
                    0087     31 _PCON	=	0x0087
                    0088     32 _TCON	=	0x0088
                    0089     33 _TMOD	=	0x0089
                    008A     34 _TL0	=	0x008a
                    008B     35 _TL1	=	0x008b
                    008C     36 _TH0	=	0x008c
                    008D     37 _TH1	=	0x008d
                    0090     38 _P1	=	0x0090
                    0098     39 _SCON	=	0x0098
                    0099     40 _SBUF	=	0x0099
                    00A0     41 _P2	=	0x00a0
                    00A8     42 _IE	=	0x00a8
                    00B0     43 _P3	=	0x00b0
                    00B8     44 _IP	=	0x00b8
                    00D0     45 _PSW	=	0x00d0
                    00E0     46 _ACC	=	0x00e0
                    00F0     47 _B	=	0x00f0
                             48 ;--------------------------------------------------------
                             49 ; special function bits 
                             50 ;--------------------------------------------------------
                    0080     51 _P0_0	=	0x0080
                    0081     52 _P0_1	=	0x0081
                    0082     53 _P0_2	=	0x0082
                    0083     54 _P0_3	=	0x0083
                    0084     55 _P0_4	=	0x0084
                    0085     56 _P0_5	=	0x0085
                    0086     57 _P0_6	=	0x0086
                    0087     58 _P0_7	=	0x0087
                    0088     59 _IT0	=	0x0088
                    0089     60 _IE0	=	0x0089
                    008A     61 _IT1	=	0x008a
                    008B     62 _IE1	=	0x008b
                    008C     63 _TR0	=	0x008c
                    008D     64 _TF0	=	0x008d
                    008E     65 _TR1	=	0x008e
                    008F     66 _TF1	=	0x008f
                    0090     67 _P1_0	=	0x0090
                    0091     68 _P1_1	=	0x0091
                    0092     69 _P1_2	=	0x0092
                    0093     70 _P1_3	=	0x0093
                    0094     71 _P1_4	=	0x0094
                    0095     72 _P1_5	=	0x0095
                    0096     73 _P1_6	=	0x0096
                    0097     74 _P1_7	=	0x0097
                    0098     75 _RI	=	0x0098
                    0099     76 _TI	=	0x0099
                    009A     77 _RB8	=	0x009a
                    009B     78 _TB8	=	0x009b
                    009C     79 _REN	=	0x009c
                    009D     80 _SM2	=	0x009d
                    009E     81 _SM1	=	0x009e
                    009F     82 _SM0	=	0x009f
                    00A0     83 _P2_0	=	0x00a0
                    00A1     84 _P2_1	=	0x00a1
                    00A2     85 _P2_2	=	0x00a2
                    00A3     86 _P2_3	=	0x00a3
                    00A4     87 _P2_4	=	0x00a4
                    00A5     88 _P2_5	=	0x00a5
                    00A6     89 _P2_6	=	0x00a6
                    00A7     90 _P2_7	=	0x00a7
                    00A8     91 _EX0	=	0x00a8
                    00A9     92 _ET0	=	0x00a9
                    00AA     93 _EX1	=	0x00aa
                    00AB     94 _ET1	=	0x00ab
                    00AC     95 _ES	=	0x00ac
                    00AF     96 _EA	=	0x00af
                    00B0     97 _P3_0	=	0x00b0
                    00B1     98 _P3_1	=	0x00b1
                    00B2     99 _P3_2	=	0x00b2
                    00B3    100 _P3_3	=	0x00b3
                    00B4    101 _P3_4	=	0x00b4
                    00B5    102 _P3_5	=	0x00b5
                    00B6    103 _P3_6	=	0x00b6
                    00B7    104 _P3_7	=	0x00b7
                    00B0    105 _RXD	=	0x00b0
                    00B1    106 _TXD	=	0x00b1
                    00B2    107 _INT0	=	0x00b2
                    00B3    108 _INT1	=	0x00b3
                    00B4    109 _T0	=	0x00b4
                    00B5    110 _T1	=	0x00b5
                    00B6    111 _WR	=	0x00b6
                    00B7    112 _RD	=	0x00b7
                    00B8    113 _PX0	=	0x00b8
                    00B9    114 _PT0	=	0x00b9
                    00BA    115 _PX1	=	0x00ba
                    00BB    116 _PT1	=	0x00bb
                    00BC    117 _PS	=	0x00bc
                    00D0    118 _P	=	0x00d0
                    00D1    119 _F1	=	0x00d1
                    00D2    120 _OV	=	0x00d2
                    00D3    121 _RS0	=	0x00d3
                    00D4    122 _RS1	=	0x00d4
                    00D5    123 _F0	=	0x00d5
                    00D6    124 _AC	=	0x00d6
                    00D7    125 _CY	=	0x00d7
                            126 ;--------------------------------------------------------
                            127 ; overlayable register banks 
                            128 ;--------------------------------------------------------
                            129 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     130 	.ds 8
                            131 ;--------------------------------------------------------
                            132 ; internal ram data
                            133 ;--------------------------------------------------------
                            134 	.area DSEG    (DATA)
   0000                     135 _power_PARM_2::
   0000                     136 	.ds 2
   0002                     137 _hex_to_int_PARM_2::
   0002                     138 	.ds 2
   0004                     139 _hex_to_int_hex_1_1::
   0004                     140 	.ds 3
   0007                     141 _hex_to_int_result_1_1::
   0007                     142 	.ds 2
   0009                     143 _oct_to_int_PARM_2::
   0009                     144 	.ds 2
   000B                     145 _oct_to_int_oct_1_1::
   000B                     146 	.ds 3
   000E                     147 _oct_to_int_result_1_1::
   000E                     148 	.ds 2
   0010                     149 _dec_to_int_PARM_2::
   0010                     150 	.ds 2
   0012                     151 _dec_to_int_dec_1_1::
   0012                     152 	.ds 3
   0015                     153 _dec_to_int_result_1_1::
   0015                     154 	.ds 2
   0017                     155 _print_the_stuff_array_1_1::
   0017                     156 	.ds 4
   001B                     157 _do_the_stuff_num2_1_1::
   001B                     158 	.ds 2
   001D                     159 _do_the_stuff_number_1_1::
   001D                     160 	.ds 4
                            161 ;--------------------------------------------------------
                            162 ; overlayable items in internal ram 
                            163 ;--------------------------------------------------------
                            164 	.area	OSEG    (OVR,DATA)
                            165 	.area	OSEG    (OVR,DATA)
                            166 ;--------------------------------------------------------
                            167 ; Stack segment in internal ram 
                            168 ;--------------------------------------------------------
                            169 	.area	SSEG	(DATA)
   0000                     170 __start__stack:
   0000                     171 	.ds	1
                            172 
                            173 ;--------------------------------------------------------
                            174 ; indirectly addressable internal ram data
                            175 ;--------------------------------------------------------
                            176 	.area ISEG    (DATA)
                            177 ;--------------------------------------------------------
                            178 ; bit data
                            179 ;--------------------------------------------------------
                            180 	.area BSEG    (BIT)
                            181 ;--------------------------------------------------------
                            182 ; external ram data
                            183 ;--------------------------------------------------------
                            184 	.area XSEG    (XDATA)
                            185 ;--------------------------------------------------------
                            186 ; external initialized ram data
                            187 ;--------------------------------------------------------
                            188 	.area XISEG   (XDATA)
                            189 ;--------------------------------------------------------
                            190 ; interrupt vector 
                            191 ;--------------------------------------------------------
                            192 	.area CSEG    (CODE)
   0000                     193 __interrupt_vect:
   0000 02s00r00            194 	ljmp	__sdcc_gsinit_startup
   0003 32                  195 	reti
   0004                     196 	.ds	7
   000B 32                  197 	reti
   000C                     198 	.ds	7
   0013 32                  199 	reti
   0014                     200 	.ds	7
   001B 32                  201 	reti
   001C                     202 	.ds	7
   0023 32                  203 	reti
   0024                     204 	.ds	7
   002B 32                  205 	reti
   002C                     206 	.ds	7
                            207 ;--------------------------------------------------------
                            208 ; global & static initialisations
                            209 ;--------------------------------------------------------
                            210 	.area GSINIT  (CODE)
                            211 	.area GSFINAL (CODE)
                            212 	.area GSINIT  (CODE)
   0000                     213 __sdcc_gsinit_startup:
   0000 75 81rFF            214 	mov	sp,#__start__stack - 1
   0003 12s00r00            215 	lcall	__sdcc_external_startup
   0006 E5 82               216 	mov	a,dpl
   0008 60 03               217 	jz	__sdcc_init_data
   000A 02s00r33            218 	ljmp	__sdcc_program_startup
   000D                     219 __sdcc_init_data:
                            220 ;	_mcs51_genXINIT() start
   000D 74r00               221 	mov	a,#l_XINIT
   000F 44s00               222 	orl	a,#l_XINIT>>8
   0011 60 29               223 	jz	00003$
   0013 74r00               224 	mov	a,#s_XINIT
   0015 24r00               225 	add	a,#l_XINIT
   0017 F9                  226 	mov	r1,a
   0018 74s00               227 	mov	a,#s_XINIT>>8
   001A 34s00               228 	addc	a,#l_XINIT>>8
   001C FA                  229 	mov	r2,a
   001D 90s00r00            230 	mov	dptr,#s_XINIT
   0020 78r00               231 	mov	r0,#s_XISEG
   0022 75 A0s00            232 	mov	p2,#(s_XISEG >> 8)
   0025 E4                  233 00001$:	clr	a
   0026 93                  234 	movc	a,@a+dptr
   0027 F2                  235 	movx	@r0,a
   0028 A3                  236 	inc	dptr
   0029 08                  237 	inc	r0
   002A B8 00 02            238 	cjne	r0,#0,00002$
   002D 05 A0               239 	inc	p2
   002F E5 82               240 00002$:	mov	a,dpl
   0031 B5 01 F1            241 	cjne	a,ar1,00001$
   0034 E5 83               242 	mov	a,dph
   0036 B5 02 EC            243 	cjne	a,ar2,00001$
   0039 75 A0 FF            244 	mov	p2,#0xFF
   003C                     245 00003$:
                            246 ;	_mcs51_genXINIT() end
                            247 	.area GSFINAL (CODE)
   0000 02s00r33            248 	ljmp	__sdcc_program_startup
                            249 ;--------------------------------------------------------
                            250 ; Home
                            251 ;--------------------------------------------------------
                            252 	.area HOME    (CODE)
                            253 	.area CSEG    (CODE)
                            254 ;--------------------------------------------------------
                            255 ; code
                            256 ;--------------------------------------------------------
                            257 	.area CSEG    (CODE)
   0033                     258 __sdcc_program_startup:
   0033 12s06r58            259 	lcall	_main
                            260 ;	return from main will lock up
   0036 80 FE               261 	sjmp .
                            262 ;------------------------------------------------------------
                            263 ;Allocation info for local variables in function 'getchar'
                            264 ;------------------------------------------------------------
                            265 ;------------------------------------------------------------
                            266 ;main.c:3: char getchar() {
                            267 ;	-----------------------------------------
                            268 ;	 function getchar
                            269 ;	-----------------------------------------
   0038                     270 _getchar:
                    0002    271 	ar2 = 0x02
                    0003    272 	ar3 = 0x03
                    0004    273 	ar4 = 0x04
                    0005    274 	ar5 = 0x05
                    0006    275 	ar6 = 0x06
                    0007    276 	ar7 = 0x07
                    0000    277 	ar0 = 0x00
                    0001    278 	ar1 = 0x01
                            279 ;main.c:5: while(RI == 0);
   0038                     280 00101$:
                            281 ;     genNot
   0038 A2 98               282 	mov	c,_RI
   003A B3                  283 	cpl	c
   003B E4                  284 	clr	a
   003C 33                  285 	rlc	a
                            286 ;     genIfx
                            287 ;       Peephole 105   removed redundant mov
   003D FA                  288 	mov  r2,a
                            289 ;     genIfxJump
                            290 ;       Peephole 109   removed ljmp by inverse jump logic
   003E 70 F8               291 	jnz  00101$
   0040                     292 00108$:
                            293 ;main.c:6: RI = 0;
                            294 ;     genAssign
   0040 C2 98               295 	clr	_RI
                            296 ;main.c:7: znak = SBUF;
                            297 ;     genAssign
   0042 85 99 82            298 	mov	dpl,_SBUF
                            299 ;main.c:9: return znak;
                            300 ;     genRet
   0045                     301 00104$:
   0045 22                  302 	ret
                            303 ;------------------------------------------------------------
                            304 ;Allocation info for local variables in function 'putchar'
                            305 ;------------------------------------------------------------
                            306 ;------------------------------------------------------------
                            307 ;main.c:12: void putchar(char znak) {
                            308 ;	-----------------------------------------
                            309 ;	 function putchar
                            310 ;	-----------------------------------------
   0046                     311 _putchar:
                            312 ;     genReceive
   0046 85 82 99            313 	mov	_SBUF,dpl
                            314 ;main.c:14: while(TI==0);
   0049                     315 00101$:
                            316 ;     genNot
   0049 A2 99               317 	mov	c,_TI
   004B B3                  318 	cpl	c
   004C E4                  319 	clr	a
   004D 33                  320 	rlc	a
                            321 ;     genIfx
                            322 ;       Peephole 105   removed redundant mov
   004E FA                  323 	mov  r2,a
                            324 ;     genIfxJump
                            325 ;       Peephole 109   removed ljmp by inverse jump logic
   004F 70 F8               326 	jnz  00101$
   0051                     327 00108$:
                            328 ;main.c:15: TI=0;
                            329 ;     genAssign
   0051 C2 99               330 	clr	_TI
   0053                     331 00104$:
   0053 22                  332 	ret
                            333 ;------------------------------------------------------------
                            334 ;Allocation info for local variables in function 'power'
                            335 ;------------------------------------------------------------
                            336 ;p                         Allocated to in memory with name '_power_PARM_2'
                            337 ;n                         Allocated to registers r2 r3 
                            338 ;i                         Allocated to registers 
                            339 ;------------------------------------------------------------
                            340 ;main.c:18: int power(int n, int p){
                            341 ;	-----------------------------------------
                            342 ;	 function power
                            343 ;	-----------------------------------------
   0054                     344 _power:
                            345 ;     genReceive
   0054 AA 82               346 	mov	r2,dpl
   0056 AB 83               347 	mov	r3,dph
                            348 ;main.c:21: if (p == 0) return 1;
                            349 ;     genCmpEq
   0058 E5*00               350 	mov	a,_power_PARM_2
   005A 70 04               351 	jnz	00112$
   005C E5*01               352 	mov	a,(_power_PARM_2 + 1)
                            353 ;       Peephole 162   removed sjmp by inverse jump logic
   005E 60 02               354 	jz   00113$
   0060                     355 00112$:
                            356 ;       Peephole 132   changed ljmp to sjmp
   0060 80 05               357 	sjmp 00111$
   0062                     358 00113$:
                            359 ;     genRet
                            360 ;       Peephole 182   used 16 bit load of dptr
   0062 90 00 01            361 	mov  dptr,#(((0x00)<<8) + 0x01)
                            362 ;main.c:23: for(i = 1; i < p; ++i)
                            363 ;       Peephole 132   changed ljmp to sjmp
   0065 80 43               364 	sjmp 00107$
   0067                     365 00111$:
                            366 ;     genAssign
   0067 7C 01               367 	mov	r4,#0x01
   0069 7D 00               368 	mov	r5,#0x00
   006B                     369 00103$:
                            370 ;     genCmpLt
                            371 ;     genCmp
   006B C3                  372 	clr	c
   006C EC                  373 	mov	a,r4
   006D 95*00               374 	subb	a,_power_PARM_2
   006F ED                  375 	mov	a,r5
   0070 64 80               376 	xrl	a,#0x80
   0072 85*01 F0            377 	mov	b,(_power_PARM_2 + 1)
   0075 63 F0 80            378 	xrl	b,#0x80
   0078 95 F0               379 	subb	a,b
                            380 ;     genIfxJump
                            381 ;       Peephole 108   removed ljmp by inverse jump logic
   007A 50 2A               382 	jnc  00106$
   007C                     383 00114$:
                            384 ;main.c:25: n *= n;
                            385 ;     genAssign
   007C 8A*00               386 	mov	__mulsint_PARM_2,r2
   007E 8B*01               387 	mov	(__mulsint_PARM_2 + 1),r3
                            388 ;     genCall
   0080 8A 82               389 	mov	dpl,r2
   0082 8B 83               390 	mov	dph,r3
   0084 C0 02               391 	push	ar2
   0086 C0 03               392 	push	ar3
   0088 C0 04               393 	push	ar4
   008A C0 05               394 	push	ar5
   008C 12s00r00            395 	lcall	__mulsint
   008F E5 82               396 	mov	a,dpl
   0091 85 83 F0            397 	mov	b,dph
   0094 D0 05               398 	pop	ar5
   0096 D0 04               399 	pop	ar4
   0098 D0 03               400 	pop	ar3
   009A D0 02               401 	pop	ar2
                            402 ;     genAssign
   009C FA                  403 	mov	r2,a
   009D AB F0               404 	mov	r3,b
                            405 ;main.c:23: for(i = 1; i < p; ++i)
                            406 ;     genPlus
                            407 ;     genPlusIncr
                            408 ;	tail increment optimized
   009F 0C                  409 	inc	r4
   00A0 BC 00 C8            410 	cjne	r4,#0x00,00103$
   00A3 0D                  411 	inc	r5
                            412 ;       Peephole 132   changed ljmp to sjmp
   00A4 80 C5               413 	sjmp 00103$
   00A6                     414 00106$:
                            415 ;main.c:27: return n;
                            416 ;     genRet
   00A6 8A 82               417 	mov	dpl,r2
   00A8 8B 83               418 	mov	dph,r3
   00AA                     419 00107$:
   00AA 22                  420 	ret
                            421 ;------------------------------------------------------------
                            422 ;Allocation info for local variables in function 'hex_to_int'
                            423 ;------------------------------------------------------------
                            424 ;size                      Allocated to in memory with name '_hex_to_int_PARM_2'
                            425 ;hex                       Allocated to in memory with name '_hex_to_int_hex_1_1'
                            426 ;result                    Allocated to in memory with name '_hex_to_int_result_1_1'
                            427 ;i                         Allocated to registers 
                            428 ;------------------------------------------------------------
                            429 ;main.c:30: int hex_to_int(char hex[], int size){
                            430 ;	-----------------------------------------
                            431 ;	 function hex_to_int
                            432 ;	-----------------------------------------
   00AB                     433 _hex_to_int:
                            434 ;     genReceive
   00AB 85 82*04            435 	mov	_hex_to_int_hex_1_1,dpl
   00AE 85 83*05            436 	mov	(_hex_to_int_hex_1_1 + 1),dph
   00B1 85 F0*06            437 	mov	(_hex_to_int_hex_1_1 + 2),b
                            438 ;main.c:31: int result = 0;
                            439 ;     genAssign
   00B4 E4                  440 	clr	a
   00B5 F5*08               441 	mov	(_hex_to_int_result_1_1 + 1),a
   00B7 F5*07               442 	mov	_hex_to_int_result_1_1,a
                            443 ;main.c:34: for(i = 0; i < size; ++i){
                            444 ;     genAssign
   00B9 7F 00               445 	mov	r7,#0x00
   00BB 78 00               446 	mov	r0,#0x00
   00BD                     447 00109$:
                            448 ;     genCmpLt
                            449 ;     genCmp
   00BD C3                  450 	clr	c
   00BE EF                  451 	mov	a,r7
   00BF 95*02               452 	subb	a,_hex_to_int_PARM_2
   00C1 E8                  453 	mov	a,r0
   00C2 64 80               454 	xrl	a,#0x80
   00C4 85*03 F0            455 	mov	b,(_hex_to_int_PARM_2 + 1)
   00C7 63 F0 80            456 	xrl	b,#0x80
   00CA 95 F0               457 	subb	a,b
                            458 ;     genIfxJump
   00CC 40 03               459 	jc	00121$
   00CE 02s01rA4            460 	ljmp	00112$
   00D1                     461 00121$:
                            462 ;main.c:35: if (hex[i] >= 'A' && hex[i] <= 'F'){
                            463 ;     genPlus
                            464 ;       Peephole 236g
   00D1 EF                  465 	mov  a,r7
   00D2 25*04               466 	add	a,_hex_to_int_hex_1_1
   00D4 F9                  467 	mov	r1,a
                            468 ;       Peephole 236g
   00D5 E8                  469 	mov  a,r0
   00D6 35*05               470 	addc	a,(_hex_to_int_hex_1_1 + 1)
   00D8 FD                  471 	mov	r5,a
   00D9 AE*06               472 	mov	r6,(_hex_to_int_hex_1_1 + 2)
                            473 ;     genPointerGet
                            474 ;     genGenPointerGet
   00DB 89 82               475 	mov	dpl,r1
   00DD 8D 83               476 	mov	dph,r5
   00DF 8E F0               477 	mov	b,r6
   00E1 12s00r00            478 	lcall	__gptrget
                            479 ;     genCmpLt
                            480 ;     genCmp
                            481 ;       Peephole 106   removed redundant mov 
   00E4 FA                  482 	mov  r2,a
   00E5 C3                  483 	clr  c
   00E6 64 80               484 	xrl	a,#0x80
   00E8 94 C1               485 	subb	a,#0xc1
                            486 ;     genIfxJump
                            487 ;       Peephole 132   changed ljmp to sjmp
                            488 ;       Peephole 160   removed sjmp by inverse jump logic
   00EA 40 1B               489 	jc   00106$
   00EC                     490 00122$:
                            491 ;     genCmpGt
                            492 ;     genCmp
   00EC C3                  493 	clr	c
                            494 ;       Peephole 159   avoided xrl during execution
   00ED 74 C6               495 	mov  a,#(0x46 ^ 0x80)
   00EF 8A F0               496 	mov	b,r2
   00F1 63 F0 80            497 	xrl	b,#0x80
   00F4 95 F0               498 	subb	a,b
                            499 ;     genIfxJump
                            500 ;       Peephole 132   changed ljmp to sjmp
                            501 ;       Peephole 160   removed sjmp by inverse jump logic
   00F6 40 0F               502 	jc   00106$
   00F8                     503 00123$:
                            504 ;main.c:36: hex[i] -= 'A' + 10;
                            505 ;     genMinus
   00F8 EA                  506 	mov	a,r2
   00F9 24 B5               507 	add	a,#0xb5
                            508 ;     genPointerSet
                            509 ;     genGenPointerSet
                            510 ;       Peephole 191   removed redundant mov
   00FB FA                  511 	mov  r2,a
   00FC 89 82               512 	mov  dpl,r1
   00FE 8D 83               513 	mov  dph,r5
   0100 8E F0               514 	mov  b,r6
   0102 12s00r00            515 	lcall	__gptrput
                            516 ;       Peephole 132   changed ljmp to sjmp
   0105 80 32               517 	sjmp 00107$
   0107                     518 00106$:
                            519 ;main.c:38: else if (hex[i] >= '0' && hex[i] <= '9'){
                            520 ;     genPointerGet
                            521 ;     genGenPointerGet
   0107 89 82               522 	mov	dpl,r1
   0109 8D 83               523 	mov	dph,r5
   010B 8E F0               524 	mov	b,r6
   010D 12s00r00            525 	lcall	__gptrget
                            526 ;     genCmpLt
                            527 ;     genCmp
                            528 ;       Peephole 106   removed redundant mov 
   0110 FA                  529 	mov  r2,a
   0111 C3                  530 	clr  c
   0112 64 80               531 	xrl	a,#0x80
   0114 94 B0               532 	subb	a,#0xb0
                            533 ;     genIfxJump
                            534 ;       Peephole 132   changed ljmp to sjmp
                            535 ;       Peephole 160   removed sjmp by inverse jump logic
   0116 40 1B               536 	jc   00102$
   0118                     537 00124$:
                            538 ;     genCmpGt
                            539 ;     genCmp
   0118 C3                  540 	clr	c
                            541 ;       Peephole 159   avoided xrl during execution
   0119 74 B9               542 	mov  a,#(0x39 ^ 0x80)
   011B 8A F0               543 	mov	b,r2
   011D 63 F0 80            544 	xrl	b,#0x80
   0120 95 F0               545 	subb	a,b
                            546 ;     genIfxJump
                            547 ;       Peephole 132   changed ljmp to sjmp
                            548 ;       Peephole 160   removed sjmp by inverse jump logic
   0122 40 0F               549 	jc   00102$
   0124                     550 00125$:
                            551 ;main.c:39: hex[i] -= '0';
                            552 ;     genMinus
   0124 EA                  553 	mov	a,r2
   0125 24 D0               554 	add	a,#0xd0
                            555 ;     genPointerSet
                            556 ;     genGenPointerSet
                            557 ;       Peephole 191   removed redundant mov
   0127 FA                  558 	mov  r2,a
   0128 89 82               559 	mov  dpl,r1
   012A 8D 83               560 	mov  dph,r5
   012C 8E F0               561 	mov  b,r6
   012E 12s00r00            562 	lcall	__gptrput
                            563 ;       Peephole 132   changed ljmp to sjmp
   0131 80 06               564 	sjmp 00107$
   0133                     565 00102$:
                            566 ;main.c:43: return -1;
                            567 ;     genRet
                            568 ;       Peephole 182   used 16 bit load of dptr
   0133 90 FF FF            569 	mov  dptr,#(((0xFF)<<8) + 0xFF)
   0136 02s01rAA            570 	ljmp	00113$
   0139                     571 00107$:
                            572 ;main.c:45: result += (hex[i] * power(16, size - i - 1));
                            573 ;     genPlus
                            574 ;       Peephole 236g
   0139 EF                  575 	mov  a,r7
   013A 25*04               576 	add	a,_hex_to_int_hex_1_1
   013C FA                  577 	mov	r2,a
                            578 ;       Peephole 236g
   013D E8                  579 	mov  a,r0
   013E 35*05               580 	addc	a,(_hex_to_int_hex_1_1 + 1)
   0140 FB                  581 	mov	r3,a
   0141 AC*06               582 	mov	r4,(_hex_to_int_hex_1_1 + 2)
                            583 ;     genPointerGet
                            584 ;     genGenPointerGet
   0143 8A 82               585 	mov	dpl,r2
   0145 8B 83               586 	mov	dph,r3
   0147 8C F0               587 	mov	b,r4
   0149 12s00r00            588 	lcall	__gptrget
   014C FA                  589 	mov	r2,a
                            590 ;     genMinus
   014D E5*02               591 	mov	a,_hex_to_int_PARM_2
   014F C3                  592 	clr	c
                            593 ;       Peephole 236l
   0150 9F                  594 	subb  a,r7
   0151 FB                  595 	mov	r3,a
   0152 E5*03               596 	mov	a,(_hex_to_int_PARM_2 + 1)
                            597 ;       Peephole 236l
   0154 98                  598 	subb  a,r0
   0155 FC                  599 	mov	r4,a
                            600 ;     genMinus
                            601 ;     genMinusDec
   0156 EB                  602 	mov	a,r3
   0157 24 FF               603 	add	a,#0xff
   0159 F5*00               604 	mov	_power_PARM_2,a
   015B EC                  605 	mov	a,r4
   015C 34 FF               606 	addc	a,#0xff
   015E F5*01               607 	mov	(_power_PARM_2 + 1),a
                            608 ;     genCall
                            609 ;       Peephole 182   used 16 bit load of dptr
   0160 90 00 10            610 	mov  dptr,#(((0x00)<<8) + 0x10)
   0163 C0 02               611 	push	ar2
   0165 C0 07               612 	push	ar7
   0167 C0 00               613 	push	ar0
   0169 12s00r54            614 	lcall	_power
   016C AB 82               615 	mov	r3,dpl
   016E AC 83               616 	mov	r4,dph
   0170 D0 00               617 	pop	ar0
   0172 D0 07               618 	pop	ar7
   0174 D0 02               619 	pop	ar2
                            620 ;     genCast
   0176 EA                  621 	mov	a,r2
   0177 33                  622 	rlc	a
   0178 95 E0               623 	subb	a,acc
   017A FD                  624 	mov	r5,a
                            625 ;     genAssign
   017B 8B*00               626 	mov	__mulsint_PARM_2,r3
   017D 8C*01               627 	mov	(__mulsint_PARM_2 + 1),r4
                            628 ;     genCall
   017F 8A 82               629 	mov	dpl,r2
   0181 8D 83               630 	mov	dph,r5
   0183 C0 07               631 	push	ar7
   0185 C0 00               632 	push	ar0
   0187 12s00r00            633 	lcall	__mulsint
   018A AA 82               634 	mov	r2,dpl
   018C AB 83               635 	mov	r3,dph
   018E D0 00               636 	pop	ar0
   0190 D0 07               637 	pop	ar7
                            638 ;     genPlus
                            639 ;       Peephole 236g
   0192 EA                  640 	mov  a,r2
   0193 25*07               641 	add	a,_hex_to_int_result_1_1
   0195 F5*07               642 	mov	_hex_to_int_result_1_1,a
                            643 ;       Peephole 236g
   0197 EB                  644 	mov  a,r3
   0198 35*08               645 	addc	a,(_hex_to_int_result_1_1 + 1)
   019A F5*08               646 	mov	(_hex_to_int_result_1_1 + 1),a
                            647 ;main.c:34: for(i = 0; i < size; ++i){
                            648 ;     genPlus
                            649 ;     genPlusIncr
   019C 0F                  650 	inc	r7
   019D BF 00 01            651 	cjne	r7,#0x00,00126$
   01A0 08                  652 	inc	r0
   01A1                     653 00126$:
   01A1 02s00rBD            654 	ljmp	00109$
   01A4                     655 00112$:
                            656 ;main.c:47: return result;
                            657 ;     genRet
   01A4 85*07 82            658 	mov	dpl,_hex_to_int_result_1_1
   01A7 85*08 83            659 	mov	dph,(_hex_to_int_result_1_1 + 1)
   01AA                     660 00113$:
   01AA 22                  661 	ret
                            662 ;------------------------------------------------------------
                            663 ;Allocation info for local variables in function 'oct_to_int'
                            664 ;------------------------------------------------------------
                            665 ;size                      Allocated to in memory with name '_oct_to_int_PARM_2'
                            666 ;oct                       Allocated to in memory with name '_oct_to_int_oct_1_1'
                            667 ;result                    Allocated to in memory with name '_oct_to_int_result_1_1'
                            668 ;i                         Allocated to registers 
                            669 ;------------------------------------------------------------
                            670 ;main.c:50: int oct_to_int(char oct[], int size){
                            671 ;	-----------------------------------------
                            672 ;	 function oct_to_int
                            673 ;	-----------------------------------------
   01AB                     674 _oct_to_int:
                            675 ;     genReceive
   01AB 85 82*0B            676 	mov	_oct_to_int_oct_1_1,dpl
   01AE 85 83*0C            677 	mov	(_oct_to_int_oct_1_1 + 1),dph
   01B1 85 F0*0D            678 	mov	(_oct_to_int_oct_1_1 + 2),b
                            679 ;main.c:51: int result = 0;
                            680 ;     genAssign
   01B4 E4                  681 	clr	a
   01B5 F5*0F               682 	mov	(_oct_to_int_result_1_1 + 1),a
   01B7 F5*0E               683 	mov	_oct_to_int_result_1_1,a
                            684 ;main.c:54: for(i = 0; i < size; ++i){
                            685 ;     genAssign
   01B9 7F 00               686 	mov	r7,#0x00
   01BB 78 00               687 	mov	r0,#0x00
   01BD                     688 00105$:
                            689 ;     genCmpLt
                            690 ;     genCmp
   01BD C3                  691 	clr	c
   01BE EF                  692 	mov	a,r7
   01BF 95*09               693 	subb	a,_oct_to_int_PARM_2
   01C1 E8                  694 	mov	a,r0
   01C2 64 80               695 	xrl	a,#0x80
   01C4 85*0A F0            696 	mov	b,(_oct_to_int_PARM_2 + 1)
   01C7 63 F0 80            697 	xrl	b,#0x80
   01CA 95 F0               698 	subb	a,b
                            699 ;     genIfxJump
   01CC 40 03               700 	jc	00115$
   01CE 02s02r76            701 	ljmp	00108$
   01D1                     702 00115$:
                            703 ;main.c:55: if (oct[i] >= '0' && oct[i] <= '7'){
                            704 ;     genPlus
                            705 ;       Peephole 236g
   01D1 EF                  706 	mov  a,r7
   01D2 25*0B               707 	add	a,_oct_to_int_oct_1_1
   01D4 F9                  708 	mov	r1,a
                            709 ;       Peephole 236g
   01D5 E8                  710 	mov  a,r0
   01D6 35*0C               711 	addc	a,(_oct_to_int_oct_1_1 + 1)
   01D8 FD                  712 	mov	r5,a
   01D9 AE*0D               713 	mov	r6,(_oct_to_int_oct_1_1 + 2)
                            714 ;     genPointerGet
                            715 ;     genGenPointerGet
   01DB 89 82               716 	mov	dpl,r1
   01DD 8D 83               717 	mov	dph,r5
   01DF 8E F0               718 	mov	b,r6
   01E1 12s00r00            719 	lcall	__gptrget
                            720 ;     genCmpLt
                            721 ;     genCmp
                            722 ;       Peephole 106   removed redundant mov 
   01E4 FA                  723 	mov  r2,a
   01E5 C3                  724 	clr  c
   01E6 64 80               725 	xrl	a,#0x80
   01E8 94 B0               726 	subb	a,#0xb0
                            727 ;     genIfxJump
                            728 ;       Peephole 132   changed ljmp to sjmp
                            729 ;       Peephole 160   removed sjmp by inverse jump logic
   01EA 40 23               730 	jc   00102$
   01EC                     731 00116$:
                            732 ;     genCmpGt
                            733 ;     genCmp
   01EC C3                  734 	clr	c
                            735 ;       Peephole 159   avoided xrl during execution
   01ED 74 B7               736 	mov  a,#(0x37 ^ 0x80)
   01EF 8A F0               737 	mov	b,r2
   01F1 63 F0 80            738 	xrl	b,#0x80
   01F4 95 F0               739 	subb	a,b
                            740 ;     genIfxJump
                            741 ;       Peephole 132   changed ljmp to sjmp
                            742 ;       Peephole 160   removed sjmp by inverse jump logic
   01F6 40 17               743 	jc   00102$
   01F8                     744 00117$:
                            745 ;main.c:56: oct[i] -= '0';
                            746 ;     genPointerGet
                            747 ;     genGenPointerGet
   01F8 89 82               748 	mov	dpl,r1
   01FA 8D 83               749 	mov	dph,r5
   01FC 8E F0               750 	mov	b,r6
   01FE 12s00r00            751 	lcall	__gptrget
                            752 ;     genMinus
                            753 ;       Peephole 105   removed redundant mov
                            754 ;     genPointerSet
                            755 ;     genGenPointerSet
                            756 ;       Peephole 191   removed redundant mov
                            757 ;       Peephole 215 removed some movs
   0201 24 D0               758 	add  a,#0xd0
   0203 FA                  759 	mov  r2,a
   0204 89 82               760 	mov  dpl,r1
   0206 8D 83               761 	mov  dph,r5
   0208 8E F0               762 	mov  b,r6
   020A 12s00r00            763 	lcall	__gptrput
                            764 ;       Peephole 132   changed ljmp to sjmp
   020D 80 06               765 	sjmp 00103$
   020F                     766 00102$:
                            767 ;main.c:60: return -1;
                            768 ;     genRet
                            769 ;       Peephole 182   used 16 bit load of dptr
   020F 90 FF FF            770 	mov  dptr,#(((0xFF)<<8) + 0xFF)
   0212 02s02r7C            771 	ljmp	00109$
   0215                     772 00103$:
                            773 ;main.c:62: result += (oct[i] * power(8, size - i - 1));
                            774 ;     genPointerGet
                            775 ;     genGenPointerGet
   0215 89 82               776 	mov	dpl,r1
   0217 8D 83               777 	mov	dph,r5
   0219 8E F0               778 	mov	b,r6
   021B 12s00r00            779 	lcall	__gptrget
   021E F9                  780 	mov	r1,a
                            781 ;     genMinus
   021F E5*09               782 	mov	a,_oct_to_int_PARM_2
   0221 C3                  783 	clr	c
                            784 ;       Peephole 236l
   0222 9F                  785 	subb  a,r7
   0223 FA                  786 	mov	r2,a
   0224 E5*0A               787 	mov	a,(_oct_to_int_PARM_2 + 1)
                            788 ;       Peephole 236l
   0226 98                  789 	subb  a,r0
   0227 FB                  790 	mov	r3,a
                            791 ;     genMinus
                            792 ;     genMinusDec
   0228 EA                  793 	mov	a,r2
   0229 24 FF               794 	add	a,#0xff
   022B F5*00               795 	mov	_power_PARM_2,a
   022D EB                  796 	mov	a,r3
   022E 34 FF               797 	addc	a,#0xff
   0230 F5*01               798 	mov	(_power_PARM_2 + 1),a
                            799 ;     genCall
                            800 ;       Peephole 182   used 16 bit load of dptr
   0232 90 00 08            801 	mov  dptr,#(((0x00)<<8) + 0x08)
   0235 C0 07               802 	push	ar7
   0237 C0 00               803 	push	ar0
   0239 C0 01               804 	push	ar1
   023B 12s00r54            805 	lcall	_power
   023E AA 82               806 	mov	r2,dpl
   0240 AB 83               807 	mov	r3,dph
   0242 D0 01               808 	pop	ar1
   0244 D0 00               809 	pop	ar0
   0246 D0 07               810 	pop	ar7
                            811 ;     genCast
   0248 E9                  812 	mov	a,r1
   0249 33                  813 	rlc	a
   024A 95 E0               814 	subb	a,acc
   024C FC                  815 	mov	r4,a
                            816 ;     genAssign
   024D 8A*00               817 	mov	__mulsint_PARM_2,r2
   024F 8B*01               818 	mov	(__mulsint_PARM_2 + 1),r3
                            819 ;     genCall
   0251 89 82               820 	mov	dpl,r1
   0253 8C 83               821 	mov	dph,r4
   0255 C0 07               822 	push	ar7
   0257 C0 00               823 	push	ar0
   0259 12s00r00            824 	lcall	__mulsint
   025C AA 82               825 	mov	r2,dpl
   025E AB 83               826 	mov	r3,dph
   0260 D0 00               827 	pop	ar0
   0262 D0 07               828 	pop	ar7
                            829 ;     genPlus
                            830 ;       Peephole 236g
   0264 EA                  831 	mov  a,r2
   0265 25*0E               832 	add	a,_oct_to_int_result_1_1
   0267 F5*0E               833 	mov	_oct_to_int_result_1_1,a
                            834 ;       Peephole 236g
   0269 EB                  835 	mov  a,r3
   026A 35*0F               836 	addc	a,(_oct_to_int_result_1_1 + 1)
   026C F5*0F               837 	mov	(_oct_to_int_result_1_1 + 1),a
                            838 ;main.c:54: for(i = 0; i < size; ++i){
                            839 ;     genPlus
                            840 ;     genPlusIncr
   026E 0F                  841 	inc	r7
   026F BF 00 01            842 	cjne	r7,#0x00,00118$
   0272 08                  843 	inc	r0
   0273                     844 00118$:
   0273 02s01rBD            845 	ljmp	00105$
   0276                     846 00108$:
                            847 ;main.c:64: return result;
                            848 ;     genRet
   0276 85*0E 82            849 	mov	dpl,_oct_to_int_result_1_1
   0279 85*0F 83            850 	mov	dph,(_oct_to_int_result_1_1 + 1)
   027C                     851 00109$:
   027C 22                  852 	ret
                            853 ;------------------------------------------------------------
                            854 ;Allocation info for local variables in function 'dec_to_int'
                            855 ;------------------------------------------------------------
                            856 ;size                      Allocated to in memory with name '_dec_to_int_PARM_2'
                            857 ;dec                       Allocated to in memory with name '_dec_to_int_dec_1_1'
                            858 ;result                    Allocated to in memory with name '_dec_to_int_result_1_1'
                            859 ;i                         Allocated to registers 
                            860 ;------------------------------------------------------------
                            861 ;main.c:67: int dec_to_int(char dec[], int size){
                            862 ;	-----------------------------------------
                            863 ;	 function dec_to_int
                            864 ;	-----------------------------------------
   027D                     865 _dec_to_int:
                            866 ;     genReceive
   027D 85 82*12            867 	mov	_dec_to_int_dec_1_1,dpl
   0280 85 83*13            868 	mov	(_dec_to_int_dec_1_1 + 1),dph
   0283 85 F0*14            869 	mov	(_dec_to_int_dec_1_1 + 2),b
                            870 ;main.c:68: int result = 0;
                            871 ;     genAssign
   0286 E4                  872 	clr	a
   0287 F5*16               873 	mov	(_dec_to_int_result_1_1 + 1),a
   0289 F5*15               874 	mov	_dec_to_int_result_1_1,a
                            875 ;main.c:71: for(i = 0; i < size; ++i){
                            876 ;     genAssign
   028B 7F 00               877 	mov	r7,#0x00
   028D 78 00               878 	mov	r0,#0x00
   028F                     879 00105$:
                            880 ;     genCmpLt
                            881 ;     genCmp
   028F C3                  882 	clr	c
   0290 EF                  883 	mov	a,r7
   0291 95*10               884 	subb	a,_dec_to_int_PARM_2
   0293 E8                  885 	mov	a,r0
   0294 64 80               886 	xrl	a,#0x80
   0296 85*11 F0            887 	mov	b,(_dec_to_int_PARM_2 + 1)
   0299 63 F0 80            888 	xrl	b,#0x80
   029C 95 F0               889 	subb	a,b
                            890 ;     genIfxJump
   029E 40 03               891 	jc	00115$
   02A0 02s03r48            892 	ljmp	00108$
   02A3                     893 00115$:
                            894 ;main.c:72: if (dec[i] >= '0' && dec[i] <= '9'){
                            895 ;     genPlus
                            896 ;       Peephole 236g
   02A3 EF                  897 	mov  a,r7
   02A4 25*12               898 	add	a,_dec_to_int_dec_1_1
   02A6 F9                  899 	mov	r1,a
                            900 ;       Peephole 236g
   02A7 E8                  901 	mov  a,r0
   02A8 35*13               902 	addc	a,(_dec_to_int_dec_1_1 + 1)
   02AA FD                  903 	mov	r5,a
   02AB AE*14               904 	mov	r6,(_dec_to_int_dec_1_1 + 2)
                            905 ;     genPointerGet
                            906 ;     genGenPointerGet
   02AD 89 82               907 	mov	dpl,r1
   02AF 8D 83               908 	mov	dph,r5
   02B1 8E F0               909 	mov	b,r6
   02B3 12s00r00            910 	lcall	__gptrget
                            911 ;     genCmpLt
                            912 ;     genCmp
                            913 ;       Peephole 106   removed redundant mov 
   02B6 FA                  914 	mov  r2,a
   02B7 C3                  915 	clr  c
   02B8 64 80               916 	xrl	a,#0x80
   02BA 94 B0               917 	subb	a,#0xb0
                            918 ;     genIfxJump
                            919 ;       Peephole 132   changed ljmp to sjmp
                            920 ;       Peephole 160   removed sjmp by inverse jump logic
   02BC 40 23               921 	jc   00102$
   02BE                     922 00116$:
                            923 ;     genCmpGt
                            924 ;     genCmp
   02BE C3                  925 	clr	c
                            926 ;       Peephole 159   avoided xrl during execution
   02BF 74 B9               927 	mov  a,#(0x39 ^ 0x80)
   02C1 8A F0               928 	mov	b,r2
   02C3 63 F0 80            929 	xrl	b,#0x80
   02C6 95 F0               930 	subb	a,b
                            931 ;     genIfxJump
                            932 ;       Peephole 132   changed ljmp to sjmp
                            933 ;       Peephole 160   removed sjmp by inverse jump logic
   02C8 40 17               934 	jc   00102$
   02CA                     935 00117$:
                            936 ;main.c:73: dec[i] -= '0';
                            937 ;     genPointerGet
                            938 ;     genGenPointerGet
   02CA 89 82               939 	mov	dpl,r1
   02CC 8D 83               940 	mov	dph,r5
   02CE 8E F0               941 	mov	b,r6
   02D0 12s00r00            942 	lcall	__gptrget
                            943 ;     genMinus
                            944 ;       Peephole 105   removed redundant mov
                            945 ;     genPointerSet
                            946 ;     genGenPointerSet
                            947 ;       Peephole 191   removed redundant mov
                            948 ;       Peephole 215 removed some movs
   02D3 24 D0               949 	add  a,#0xd0
   02D5 FA                  950 	mov  r2,a
   02D6 89 82               951 	mov  dpl,r1
   02D8 8D 83               952 	mov  dph,r5
   02DA 8E F0               953 	mov  b,r6
   02DC 12s00r00            954 	lcall	__gptrput
                            955 ;       Peephole 132   changed ljmp to sjmp
   02DF 80 06               956 	sjmp 00103$
   02E1                     957 00102$:
                            958 ;main.c:77: return -1;
                            959 ;     genRet
                            960 ;       Peephole 182   used 16 bit load of dptr
   02E1 90 FF FF            961 	mov  dptr,#(((0xFF)<<8) + 0xFF)
   02E4 02s03r4E            962 	ljmp	00109$
   02E7                     963 00103$:
                            964 ;main.c:79: result += (dec[i] * power(10, size - i - 1));
                            965 ;     genPointerGet
                            966 ;     genGenPointerGet
   02E7 89 82               967 	mov	dpl,r1
   02E9 8D 83               968 	mov	dph,r5
   02EB 8E F0               969 	mov	b,r6
   02ED 12s00r00            970 	lcall	__gptrget
   02F0 F9                  971 	mov	r1,a
                            972 ;     genMinus
   02F1 E5*10               973 	mov	a,_dec_to_int_PARM_2
   02F3 C3                  974 	clr	c
                            975 ;       Peephole 236l
   02F4 9F                  976 	subb  a,r7
   02F5 FA                  977 	mov	r2,a
   02F6 E5*11               978 	mov	a,(_dec_to_int_PARM_2 + 1)
                            979 ;       Peephole 236l
   02F8 98                  980 	subb  a,r0
   02F9 FB                  981 	mov	r3,a
                            982 ;     genMinus
                            983 ;     genMinusDec
   02FA EA                  984 	mov	a,r2
   02FB 24 FF               985 	add	a,#0xff
   02FD F5*00               986 	mov	_power_PARM_2,a
   02FF EB                  987 	mov	a,r3
   0300 34 FF               988 	addc	a,#0xff
   0302 F5*01               989 	mov	(_power_PARM_2 + 1),a
                            990 ;     genCall
                            991 ;       Peephole 182   used 16 bit load of dptr
   0304 90 00 0A            992 	mov  dptr,#(((0x00)<<8) + 0x0A)
   0307 C0 07               993 	push	ar7
   0309 C0 00               994 	push	ar0
   030B C0 01               995 	push	ar1
   030D 12s00r54            996 	lcall	_power
   0310 AA 82               997 	mov	r2,dpl
   0312 AB 83               998 	mov	r3,dph
   0314 D0 01               999 	pop	ar1
   0316 D0 00              1000 	pop	ar0
   0318 D0 07              1001 	pop	ar7
                           1002 ;     genCast
   031A E9                 1003 	mov	a,r1
   031B 33                 1004 	rlc	a
   031C 95 E0              1005 	subb	a,acc
   031E FC                 1006 	mov	r4,a
                           1007 ;     genAssign
   031F 8A*00              1008 	mov	__mulsint_PARM_2,r2
   0321 8B*01              1009 	mov	(__mulsint_PARM_2 + 1),r3
                           1010 ;     genCall
   0323 89 82              1011 	mov	dpl,r1
   0325 8C 83              1012 	mov	dph,r4
   0327 C0 07              1013 	push	ar7
   0329 C0 00              1014 	push	ar0
   032B 12s00r00           1015 	lcall	__mulsint
   032E AA 82              1016 	mov	r2,dpl
   0330 AB 83              1017 	mov	r3,dph
   0332 D0 00              1018 	pop	ar0
   0334 D0 07              1019 	pop	ar7
                           1020 ;     genPlus
                           1021 ;       Peephole 236g
   0336 EA                 1022 	mov  a,r2
   0337 25*15              1023 	add	a,_dec_to_int_result_1_1
   0339 F5*15              1024 	mov	_dec_to_int_result_1_1,a
                           1025 ;       Peephole 236g
   033B EB                 1026 	mov  a,r3
   033C 35*16              1027 	addc	a,(_dec_to_int_result_1_1 + 1)
   033E F5*16              1028 	mov	(_dec_to_int_result_1_1 + 1),a
                           1029 ;main.c:71: for(i = 0; i < size; ++i){
                           1030 ;     genPlus
                           1031 ;     genPlusIncr
   0340 0F                 1032 	inc	r7
   0341 BF 00 01           1033 	cjne	r7,#0x00,00118$
   0344 08                 1034 	inc	r0
   0345                    1035 00118$:
   0345 02s02r8F           1036 	ljmp	00105$
   0348                    1037 00108$:
                           1038 ;main.c:81: return result;
                           1039 ;     genRet
   0348 85*15 82           1040 	mov	dpl,_dec_to_int_result_1_1
   034B 85*16 83           1041 	mov	dph,(_dec_to_int_result_1_1 + 1)
   034E                    1042 00109$:
   034E 22                 1043 	ret
                           1044 ;------------------------------------------------------------
                           1045 ;Allocation info for local variables in function 'print_the_stuff'
                           1046 ;------------------------------------------------------------
                           1047 ;number                    Allocated to registers r2 r3 
                           1048 ;i                         Allocated to registers 
                           1049 ;array                     Allocated to in memory with name '_print_the_stuff_array_1_1'
                           1050 ;c                         Allocated to registers r6 
                           1051 ;------------------------------------------------------------
                           1052 ;main.c:84: void print_the_stuff(int number){
                           1053 ;	-----------------------------------------
                           1054 ;	 function print_the_stuff
                           1055 ;	-----------------------------------------
   034F                    1056 _print_the_stuff:
                           1057 ;     genReceive
   034F AA 82              1058 	mov	r2,dpl
   0351 AB 83              1059 	mov	r3,dph
                           1060 ;main.c:86: char array[] = {'\0','\0','\0','\0'};
                           1061 ;     genPointerSet
                           1062 ;     genNearPointerSet
                           1063 ;     genDataPointerSet
   0353 75*17 00           1064 	mov	_print_the_stuff_array_1_1,#0x00
                           1065 ;     genPointerSet
                           1066 ;     genNearPointerSet
                           1067 ;     genDataPointerSet
   0356 75*18 00           1068 	mov	(_print_the_stuff_array_1_1 + 0x0001),#0x00
                           1069 ;     genPointerSet
                           1070 ;     genNearPointerSet
                           1071 ;     genDataPointerSet
   0359 75*19 00           1072 	mov	(_print_the_stuff_array_1_1 + 0x0002),#0x00
                           1073 ;     genPointerSet
                           1074 ;     genNearPointerSet
                           1075 ;     genDataPointerSet
   035C 75*1A 00           1076 	mov	(_print_the_stuff_array_1_1 + 0x0003),#0x00
                           1077 ;main.c:89: if (number == 0) putchar('0');
                           1078 ;     genCmpEq
                           1079 ;       Peephole 132   changed ljmp to sjmp
                           1080 ;       Peephole 198   optimized misc jump sequence
   035F BA 00 11           1081 	cjne r2,#0x00,00114$
   0362 BB 00 0E           1082 	cjne r3,#0x00,00114$
                           1083 ;00117$:
                           1084 ;       Peephole 200   removed redundant sjmp
   0365                    1085 00118$:
                           1086 ;     genCall
   0365 75 82 30           1087 	mov	dpl,#0x30
   0368 C0 02              1088 	push	ar2
   036A C0 03              1089 	push	ar3
   036C 12s00r46           1090 	lcall	_putchar
   036F D0 03              1091 	pop	ar3
   0371 D0 02              1092 	pop	ar2
                           1093 ;main.c:91: while(number > 0){
   0373                    1094 00114$:
                           1095 ;     genAssign
   0373 7C 00              1096 	mov	r4,#0x00
   0375 7D 00              1097 	mov	r5,#0x00
   0377                    1098 00103$:
                           1099 ;     genCmpGt
                           1100 ;     genCmp
   0377 C3                 1101 	clr	c
                           1102 ;       Peephole 180   changed mov to clr
   0378 E4                 1103 	clr  a
   0379 9A                 1104 	subb	a,r2
                           1105 ;       Peephole 159   avoided xrl during execution
   037A 74 80              1106 	mov  a,#(0x00 ^ 0x80)
   037C 8B F0              1107 	mov	b,r3
   037E 63 F0 80           1108 	xrl	b,#0x80
   0381 95 F0              1109 	subb	a,b
                           1110 ;     genIfxJump
   0383 40 03              1111 	jc	00119$
   0385 02s03rE6           1112 	ljmp	00116$
   0388                    1113 00119$:
                           1114 ;main.c:92: c = ( number % 10 ) + '0';
                           1115 ;     genAssign
   0388 E4                 1116 	clr	a
   0389 F5*01              1117 	mov	(__modsint_PARM_2 + 1),a
   038B 75*00 0A           1118 	mov	__modsint_PARM_2,#0x0A
                           1119 ;     genCall
   038E 8A 82              1120 	mov	dpl,r2
   0390 8B 83              1121 	mov	dph,r3
   0392 C0 02              1122 	push	ar2
   0394 C0 03              1123 	push	ar3
   0396 C0 04              1124 	push	ar4
   0398 C0 05              1125 	push	ar5
   039A 12s00r00           1126 	lcall	__modsint
   039D E5 82              1127 	mov	a,dpl
   039F 85 83 F0           1128 	mov	b,dph
   03A2 D0 05              1129 	pop	ar5
   03A4 D0 04              1130 	pop	ar4
   03A6 D0 03              1131 	pop	ar3
   03A8 D0 02              1132 	pop	ar2
                           1133 ;     genPlus
   03AA 24 30              1134 	add	a,#0x30
   03AC FE                 1135 	mov	r6,a
   03AD E5 F0              1136 	mov	a,b
   03AF 34 00              1137 	addc	a,#0x00
   03B1 FF                 1138 	mov	r7,a
                           1139 ;     genCast
                           1140 ;main.c:93: array[i] = c;
                           1141 ;     genPlus
                           1142 ;       Peephole 236g
   03B2 EC                 1143 	mov  a,r4
   03B3 24r17              1144 	add	a,#_print_the_stuff_array_1_1
                           1145 ;     genPointerSet
                           1146 ;     genNearPointerSet
   03B5 A8 E0              1147 	mov	r0,acc
   03B7 A6 06              1148 	mov	@r0,ar6
                           1149 ;main.c:94: ++i;
                           1150 ;     genPlus
                           1151 ;     genPlusIncr
   03B9 0C                 1152 	inc	r4
   03BA BC 00 01           1153 	cjne	r4,#0x00,00120$
   03BD 0D                 1154 	inc	r5
   03BE                    1155 00120$:
                           1156 ;main.c:95: number /= 10;
                           1157 ;     genAssign
   03BE E4                 1158 	clr	a
   03BF F5*01              1159 	mov	(__divsint_PARM_2 + 1),a
   03C1 75*00 0A           1160 	mov	__divsint_PARM_2,#0x0A
                           1161 ;     genCall
   03C4 8A 82              1162 	mov	dpl,r2
   03C6 8B 83              1163 	mov	dph,r3
   03C8 C0 02              1164 	push	ar2
   03CA C0 03              1165 	push	ar3
   03CC C0 04              1166 	push	ar4
   03CE C0 05              1167 	push	ar5
   03D0 12s00r00           1168 	lcall	__divsint
   03D3 E5 82              1169 	mov	a,dpl
   03D5 85 83 F0           1170 	mov	b,dph
   03D8 D0 05              1171 	pop	ar5
   03DA D0 04              1172 	pop	ar4
   03DC D0 03              1173 	pop	ar3
   03DE D0 02              1174 	pop	ar2
                           1175 ;     genAssign
   03E0 FA                 1176 	mov	r2,a
   03E1 AB F0              1177 	mov	r3,b
   03E3 02s03r77           1178 	ljmp	00103$
                           1179 ;main.c:97: for(i = 4; i >= 0; --i)
   03E6                    1180 00116$:
                           1181 ;     genAssign
   03E6 7A 04              1182 	mov	r2,#0x04
   03E8 7B 00              1183 	mov	r3,#0x00
   03EA                    1184 00106$:
                           1185 ;     genCmpLt
                           1186 ;     genCmp
   03EA EB                 1187 	mov	a,r3
                           1188 ;     genIfxJump
                           1189 ;       Peephole 112   removed ljmp by inverse jump logic
   03EB 20 E7 18           1190 	jb   acc.7,00109$
   03EE                    1191 00121$:
                           1192 ;main.c:99: putchar(array[i]);
                           1193 ;     genPlus
                           1194 ;       Peephole 236g
   03EE EA                 1195 	mov  a,r2
   03EF 24r17              1196 	add	a,#_print_the_stuff_array_1_1
   03F1 F8                 1197 	mov	r0,a
                           1198 ;     genPointerGet
                           1199 ;     genNearPointerGet
   03F2 86 82              1200 	mov	dpl,@r0
                           1201 ;     genCall
   03F4 C0 02              1202 	push	ar2
   03F6 C0 03              1203 	push	ar3
   03F8 12s00r46           1204 	lcall	_putchar
   03FB D0 03              1205 	pop	ar3
   03FD D0 02              1206 	pop	ar2
                           1207 ;main.c:97: for(i = 4; i >= 0; --i)
                           1208 ;     genMinus
                           1209 ;     genMinusDec
                           1210 ;	tail decrement optimized
   03FF 1A                 1211 	dec	r2
   0400 BA FF E7           1212 	cjne	r2,#0xff,00106$
   0403 1B                 1213 	dec	r3
                           1214 ;       Peephole 132   changed ljmp to sjmp
   0404 80 E4              1215 	sjmp 00106$
   0406                    1216 00109$:
                           1217 ;main.c:101: putchar('\n');
                           1218 ;     genCall
   0406 75 82 0A           1219 	mov	dpl,#0x0A
   0409 12s00r46           1220 	lcall	_putchar
   040C                    1221 00110$:
   040C 22                 1222 	ret
                           1223 ;------------------------------------------------------------
                           1224 ;Allocation info for local variables in function 'do_the_stuff'
                           1225 ;------------------------------------------------------------
                           1226 ;i                         Allocated to registers 
                           1227 ;j                         Allocated to registers 
                           1228 ;num1                      Allocated to registers r2 r3 
                           1229 ;num2                      Allocated to in memory with name '_do_the_stuff_num2_1_1'
                           1230 ;num3                      Allocated to registers r4 r5 
                           1231 ;result                    Allocated to registers r2 r3 
                           1232 ;c                         Allocated to registers r6 
                           1233 ;number                    Allocated to in memory with name '_do_the_stuff_number_1_1'
                           1234 ;------------------------------------------------------------
                           1235 ;main.c:104: void do_the_stuff(){
                           1236 ;	-----------------------------------------
                           1237 ;	 function do_the_stuff
                           1238 ;	-----------------------------------------
   040D                    1239 _do_the_stuff:
                           1240 ;main.c:112: char number[] = { '\0','\0','\0','\0' };
                           1241 ;     genPointerSet
                           1242 ;     genNearPointerSet
                           1243 ;     genDataPointerSet
   040D 75*1D 00           1244 	mov	_do_the_stuff_number_1_1,#0x00
                           1245 ;     genPointerSet
                           1246 ;     genNearPointerSet
                           1247 ;     genDataPointerSet
   0410 75*1E 00           1248 	mov	(_do_the_stuff_number_1_1 + 0x0001),#0x00
                           1249 ;     genPointerSet
                           1250 ;     genNearPointerSet
                           1251 ;     genDataPointerSet
   0413 75*1F 00           1252 	mov	(_do_the_stuff_number_1_1 + 0x0002),#0x00
                           1253 ;     genPointerSet
                           1254 ;     genNearPointerSet
                           1255 ;     genDataPointerSet
   0416 75*20 00           1256 	mov	(_do_the_stuff_number_1_1 + 0x0003),#0x00
                           1257 ;main.c:114: for(i = 0; i < 4; ++i)
                           1258 ;     genAssign
   0419 7A 00              1259 	mov	r2,#0x00
   041B 7B 00              1260 	mov	r3,#0x00
                           1261 ;     genAssign
   041D 7C 00              1262 	mov	r4,#0x00
   041F 7D 00              1263 	mov	r5,#0x00
   0421                    1264 00103$:
                           1265 ;     genCmpLt
                           1266 ;     genCmp
   0421 C3                 1267 	clr	c
   0422 EC                 1268 	mov	a,r4
   0423 94 04              1269 	subb	a,#0x04
   0425 ED                 1270 	mov	a,r5
   0426 64 80              1271 	xrl	a,#0x80
   0428 94 80              1272 	subb	a,#0x80
                           1273 ;     genIfxJump
                           1274 ;       Peephole 108   removed ljmp by inverse jump logic
   042A 50 47              1275 	jnc  00106$
   042C                    1276 00130$:
                           1277 ;main.c:116: c = getchar();
                           1278 ;     genCall
   042C C0 02              1279 	push	ar2
   042E C0 03              1280 	push	ar3
   0430 C0 04              1281 	push	ar4
   0432 C0 05              1282 	push	ar5
   0434 12s00r38           1283 	lcall	_getchar
   0437 E5 82              1284 	mov	a,dpl
   0439 D0 05              1285 	pop	ar5
   043B D0 04              1286 	pop	ar4
   043D D0 03              1287 	pop	ar3
   043F D0 02              1288 	pop	ar2
                           1289 ;     genAssign
   0441 FE                 1290 	mov	r6,a
                           1291 ;main.c:117: if (c == ' ') break;
                           1292 ;     genCmpEq
   0442 BE 20 02           1293 	cjne	r6,#0x20,00131$
                           1294 ;       Peephole 132   changed ljmp to sjmp
   0445 80 2C              1295 	sjmp 00106$
   0447                    1296 00131$:
                           1297 ;main.c:118: number[i] = c;
                           1298 ;     genPlus
                           1299 ;       Peephole 236g
   0447 EC                 1300 	mov  a,r4
   0448 24r1D              1301 	add	a,#_do_the_stuff_number_1_1
                           1302 ;     genPointerSet
                           1303 ;     genNearPointerSet
   044A A8 E0              1304 	mov	r0,acc
   044C A6 06              1305 	mov	@r0,ar6
                           1306 ;main.c:119: putchar(number[i]);
                           1307 ;     genCall
   044E 8E 82              1308 	mov	dpl,r6
   0450 C0 02              1309 	push	ar2
   0452 C0 03              1310 	push	ar3
   0454 C0 04              1311 	push	ar4
   0456 C0 05              1312 	push	ar5
   0458 C0 06              1313 	push	ar6
   045A 12s00r46           1314 	lcall	_putchar
   045D D0 06              1315 	pop	ar6
   045F D0 05              1316 	pop	ar5
   0461 D0 04              1317 	pop	ar4
   0463 D0 03              1318 	pop	ar3
   0465 D0 02              1319 	pop	ar2
                           1320 ;main.c:120: ++j;
                           1321 ;     genPlus
                           1322 ;     genPlusIncr
   0467 0A                 1323 	inc	r2
   0468 BA 00 01           1324 	cjne	r2,#0x00,00132$
   046B 0B                 1325 	inc	r3
   046C                    1326 00132$:
                           1327 ;main.c:114: for(i = 0; i < 4; ++i)
                           1328 ;     genPlus
                           1329 ;     genPlusIncr
   046C 0C                 1330 	inc	r4
   046D BC 00 01           1331 	cjne	r4,#0x00,00133$
   0470 0D                 1332 	inc	r5
   0471                    1333 00133$:
                           1334 ;       Peephole 132   changed ljmp to sjmp
   0471 80 AE              1335 	sjmp 00103$
   0473                    1336 00106$:
                           1337 ;main.c:123: num1 = hex_to_int(number, j);
                           1338 ;     genAssign
   0473 8A*02              1339 	mov	_hex_to_int_PARM_2,r2
   0475 8B*03              1340 	mov	(_hex_to_int_PARM_2 + 1),r3
                           1341 ;     genCall
                           1342 ;       Peephole 182a use 16 bit load of DPTR
   0477 90s00r1D           1343 	mov dptr,#_do_the_stuff_number_1_1
   047A 75 F0 00           1344 	mov	b,#0x00
   047D C0 06              1345 	push	ar6
   047F 12s00rAB           1346 	lcall	_hex_to_int
   0482 E5 82              1347 	mov	a,dpl
   0484 85 83 F0           1348 	mov	b,dph
   0487 D0 06              1349 	pop	ar6
                           1350 ;     genAssign
   0489 FA                 1351 	mov	r2,a
   048A AB F0              1352 	mov	r3,b
                           1353 ;main.c:125: print_the_stuff(num1);
                           1354 ;     genCall
   048C 8A 82              1355 	mov	dpl,r2
   048E 8B 83              1356 	mov	dph,r3
   0490 C0 02              1357 	push	ar2
   0492 C0 03              1358 	push	ar3
   0494 C0 06              1359 	push	ar6
   0496 12s03r4F           1360 	lcall	_print_the_stuff
   0499 D0 06              1361 	pop	ar6
   049B D0 03              1362 	pop	ar3
   049D D0 02              1363 	pop	ar2
                           1364 ;main.c:127: putchar(' ');
                           1365 ;     genCall
   049F 75 82 20           1366 	mov	dpl,#0x20
   04A2 C0 02              1367 	push	ar2
   04A4 C0 03              1368 	push	ar3
   04A6 C0 06              1369 	push	ar6
   04A8 12s00r46           1370 	lcall	_putchar
   04AB D0 06              1371 	pop	ar6
   04AD D0 03              1372 	pop	ar3
   04AF D0 02              1373 	pop	ar2
                           1374 ;main.c:130: for(i = 0; i < 4; ++i)
                           1375 ;     genAssign
   04B1 7C 00              1376 	mov	r4,#0x00
   04B3 7D 00              1377 	mov	r5,#0x00
                           1378 ;     genAssign
   04B5 7F 00              1379 	mov	r7,#0x00
   04B7 78 00              1380 	mov	r0,#0x00
   04B9                    1381 00109$:
                           1382 ;     genCmpLt
                           1383 ;     genCmp
   04B9 C3                 1384 	clr	c
   04BA EF                 1385 	mov	a,r7
   04BB 94 04              1386 	subb	a,#0x04
   04BD E8                 1387 	mov	a,r0
   04BE 64 80              1388 	xrl	a,#0x80
   04C0 94 80              1389 	subb	a,#0x80
                           1390 ;     genIfxJump
   04C2 40 03              1391 	jc	00134$
   04C4 02s05r23           1392 	ljmp	00112$
   04C7                    1393 00134$:
                           1394 ;main.c:132: c = getchar();
                           1395 ;     genCall
   04C7 C0 02              1396 	push	ar2
   04C9 C0 03              1397 	push	ar3
   04CB C0 04              1398 	push	ar4
   04CD C0 05              1399 	push	ar5
   04CF C0 06              1400 	push	ar6
   04D1 C0 07              1401 	push	ar7
   04D3 C0 00              1402 	push	ar0
   04D5 12s00r38           1403 	lcall	_getchar
   04D8 E5 82              1404 	mov	a,dpl
   04DA D0 00              1405 	pop	ar0
   04DC D0 07              1406 	pop	ar7
   04DE D0 06              1407 	pop	ar6
   04E0 D0 05              1408 	pop	ar5
   04E2 D0 04              1409 	pop	ar4
   04E4 D0 03              1410 	pop	ar3
   04E6 D0 02              1411 	pop	ar2
                           1412 ;     genAssign
   04E8 FE                 1413 	mov	r6,a
                           1414 ;main.c:133: if (c == ' ') break;
                           1415 ;     genCmpEq
   04E9 BE 20 02           1416 	cjne	r6,#0x20,00135$
                           1417 ;       Peephole 132   changed ljmp to sjmp
   04EC 80 35              1418 	sjmp 00112$
   04EE                    1419 00135$:
                           1420 ;main.c:134: number[i] = c;
                           1421 ;     genPlus
                           1422 ;       Peephole 236g
   04EE EF                 1423 	mov  a,r7
   04EF 24r1D              1424 	add	a,#_do_the_stuff_number_1_1
                           1425 ;     genPointerSet
                           1426 ;     genNearPointerSet
   04F1 A9 E0              1427 	mov	r1,acc
   04F3 A7 06              1428 	mov	@r1,ar6
                           1429 ;main.c:135: putchar(number[i]);
                           1430 ;     genCall
   04F5 8E 82              1431 	mov	dpl,r6
   04F7 C0 02              1432 	push	ar2
   04F9 C0 03              1433 	push	ar3
   04FB C0 04              1434 	push	ar4
   04FD C0 05              1435 	push	ar5
   04FF C0 06              1436 	push	ar6
   0501 C0 07              1437 	push	ar7
   0503 C0 00              1438 	push	ar0
   0505 12s00r46           1439 	lcall	_putchar
   0508 D0 00              1440 	pop	ar0
   050A D0 07              1441 	pop	ar7
   050C D0 06              1442 	pop	ar6
   050E D0 05              1443 	pop	ar5
   0510 D0 04              1444 	pop	ar4
   0512 D0 03              1445 	pop	ar3
   0514 D0 02              1446 	pop	ar2
                           1447 ;main.c:136: ++j;
                           1448 ;     genPlus
                           1449 ;     genPlusIncr
   0516 0C                 1450 	inc	r4
   0517 BC 00 01           1451 	cjne	r4,#0x00,00136$
   051A 0D                 1452 	inc	r5
   051B                    1453 00136$:
                           1454 ;main.c:130: for(i = 0; i < 4; ++i)
                           1455 ;     genPlus
                           1456 ;     genPlusIncr
   051B 0F                 1457 	inc	r7
   051C BF 00 01           1458 	cjne	r7,#0x00,00137$
   051F 08                 1459 	inc	r0
   0520                    1460 00137$:
   0520 02s04rB9           1461 	ljmp	00109$
   0523                    1462 00112$:
                           1463 ;main.c:139: num2 = dec_to_int(number, j);
                           1464 ;     genAssign
   0523 8C*10              1465 	mov	_dec_to_int_PARM_2,r4
   0525 8D*11              1466 	mov	(_dec_to_int_PARM_2 + 1),r5
                           1467 ;     genCall
                           1468 ;       Peephole 182a use 16 bit load of DPTR
   0527 90s00r1D           1469 	mov dptr,#_do_the_stuff_number_1_1
   052A 75 F0 00           1470 	mov	b,#0x00
   052D C0 02              1471 	push	ar2
   052F C0 03              1472 	push	ar3
   0531 C0 06              1473 	push	ar6
   0533 12s02r7D           1474 	lcall	_dec_to_int
   0536 E5 82              1475 	mov	a,dpl
   0538 85 83 F0           1476 	mov	b,dph
   053B D0 06              1477 	pop	ar6
   053D D0 03              1478 	pop	ar3
   053F D0 02              1479 	pop	ar2
                           1480 ;     genAssign
   0541 F5*1B              1481 	mov	_do_the_stuff_num2_1_1,a
   0543 85 F0*1C           1482 	mov	(_do_the_stuff_num2_1_1 + 1),b
                           1483 ;main.c:141: print_the_stuff(num2);
                           1484 ;     genCall
   0546 85*1B 82           1485 	mov	dpl,_do_the_stuff_num2_1_1
   0549 85*1C 83           1486 	mov	dph,(_do_the_stuff_num2_1_1 + 1)
   054C C0 02              1487 	push	ar2
   054E C0 03              1488 	push	ar3
   0550 C0 06              1489 	push	ar6
   0552 12s03r4F           1490 	lcall	_print_the_stuff
   0555 D0 06              1491 	pop	ar6
   0557 D0 03              1492 	pop	ar3
   0559 D0 02              1493 	pop	ar2
                           1494 ;main.c:143: putchar(' ');
                           1495 ;     genCall
   055B 75 82 20           1496 	mov	dpl,#0x20
   055E C0 02              1497 	push	ar2
   0560 C0 03              1498 	push	ar3
   0562 C0 06              1499 	push	ar6
   0564 12s00r46           1500 	lcall	_putchar
   0567 D0 06              1501 	pop	ar6
   0569 D0 03              1502 	pop	ar3
   056B D0 02              1503 	pop	ar2
                           1504 ;main.c:146: for(i = 0; i < 4; ++i)
                           1505 ;     genAssign
   056D 7F 00              1506 	mov	r7,#0x00
   056F 78 00              1507 	mov	r0,#0x00
                           1508 ;     genAssign
   0571 79 00              1509 	mov	r1,#0x00
   0573 7C 00              1510 	mov	r4,#0x00
   0575                    1511 00115$:
                           1512 ;     genCmpLt
                           1513 ;     genCmp
   0575 C3                 1514 	clr	c
   0576 E9                 1515 	mov	a,r1
   0577 94 04              1516 	subb	a,#0x04
   0579 EC                 1517 	mov	a,r4
   057A 64 80              1518 	xrl	a,#0x80
   057C 94 80              1519 	subb	a,#0x80
                           1520 ;     genIfxJump
   057E 40 03              1521 	jc	00138$
   0580 02s05rE3           1522 	ljmp	00118$
   0583                    1523 00138$:
                           1524 ;main.c:148: c = getchar();
                           1525 ;     genCall
   0583 C0 02              1526 	push	ar2
   0585 C0 03              1527 	push	ar3
   0587 C0 04              1528 	push	ar4
   0589 C0 06              1529 	push	ar6
   058B C0 07              1530 	push	ar7
   058D C0 00              1531 	push	ar0
   058F C0 01              1532 	push	ar1
   0591 12s00r38           1533 	lcall	_getchar
   0594 E5 82              1534 	mov	a,dpl
   0596 D0 01              1535 	pop	ar1
   0598 D0 00              1536 	pop	ar0
   059A D0 07              1537 	pop	ar7
   059C D0 06              1538 	pop	ar6
   059E D0 04              1539 	pop	ar4
   05A0 D0 03              1540 	pop	ar3
   05A2 D0 02              1541 	pop	ar2
                           1542 ;     genAssign
   05A4 FE                 1543 	mov	r6,a
                           1544 ;main.c:149: if (c == 'l') break;
                           1545 ;     genCmpEq
   05A5 BE 6C 02           1546 	cjne	r6,#0x6C,00139$
                           1547 ;       Peephole 132   changed ljmp to sjmp
   05A8 80 39              1548 	sjmp 00118$
   05AA                    1549 00139$:
                           1550 ;main.c:150: number[i] = c;
                           1551 ;     genPlus
                           1552 ;       Peephole 236g
   05AA E9                 1553 	mov  a,r1
   05AB 24r1D              1554 	add	a,#_do_the_stuff_number_1_1
                           1555 ;     genPointerSet
                           1556 ;     genNearPointerSet
   05AD C0 00              1557 	push	ar0
   05AF A8 E0              1558 	mov	r0,acc
   05B1 A6 06              1559 	mov	@r0,ar6
   05B3 D0 00              1560 	pop	ar0
                           1561 ;main.c:151: putchar(number[i]);
                           1562 ;     genCall
   05B5 8E 82              1563 	mov	dpl,r6
   05B7 C0 02              1564 	push	ar2
   05B9 C0 03              1565 	push	ar3
   05BB C0 04              1566 	push	ar4
   05BD C0 06              1567 	push	ar6
   05BF C0 07              1568 	push	ar7
   05C1 C0 00              1569 	push	ar0
   05C3 C0 01              1570 	push	ar1
   05C5 12s00r46           1571 	lcall	_putchar
   05C8 D0 01              1572 	pop	ar1
   05CA D0 00              1573 	pop	ar0
   05CC D0 07              1574 	pop	ar7
   05CE D0 06              1575 	pop	ar6
   05D0 D0 04              1576 	pop	ar4
   05D2 D0 03              1577 	pop	ar3
   05D4 D0 02              1578 	pop	ar2
                           1579 ;main.c:152: ++j;
                           1580 ;     genPlus
                           1581 ;     genPlusIncr
   05D6 0F                 1582 	inc	r7
   05D7 BF 00 01           1583 	cjne	r7,#0x00,00140$
   05DA 08                 1584 	inc	r0
   05DB                    1585 00140$:
                           1586 ;main.c:146: for(i = 0; i < 4; ++i)
                           1587 ;     genPlus
                           1588 ;     genPlusIncr
   05DB 09                 1589 	inc	r1
   05DC B9 00 01           1590 	cjne	r1,#0x00,00141$
   05DF 0C                 1591 	inc	r4
   05E0                    1592 00141$:
   05E0 02s05r75           1593 	ljmp	00115$
   05E3                    1594 00118$:
                           1595 ;main.c:155: num3 = oct_to_int(number, j);
                           1596 ;     genAssign
   05E3 8F*09              1597 	mov	_oct_to_int_PARM_2,r7
   05E5 88*0A              1598 	mov	(_oct_to_int_PARM_2 + 1),r0
                           1599 ;     genCall
                           1600 ;       Peephole 182a use 16 bit load of DPTR
   05E7 90s00r1D           1601 	mov dptr,#_do_the_stuff_number_1_1
   05EA 75 F0 00           1602 	mov	b,#0x00
   05ED C0 02              1603 	push	ar2
   05EF C0 03              1604 	push	ar3
   05F1 12s01rAB           1605 	lcall	_oct_to_int
   05F4 E5 82              1606 	mov	a,dpl
   05F6 85 83 F0           1607 	mov	b,dph
   05F9 D0 03              1608 	pop	ar3
   05FB D0 02              1609 	pop	ar2
                           1610 ;     genAssign
   05FD FC                 1611 	mov	r4,a
   05FE AD F0              1612 	mov	r5,b
                           1613 ;main.c:157: print_the_stuff(num3);
                           1614 ;     genCall
   0600 8C 82              1615 	mov	dpl,r4
   0602 8D 83              1616 	mov	dph,r5
   0604 C0 02              1617 	push	ar2
   0606 C0 03              1618 	push	ar3
   0608 C0 04              1619 	push	ar4
   060A C0 05              1620 	push	ar5
   060C 12s03r4F           1621 	lcall	_print_the_stuff
   060F D0 05              1622 	pop	ar5
   0611 D0 04              1623 	pop	ar4
   0613 D0 03              1624 	pop	ar3
   0615 D0 02              1625 	pop	ar2
                           1626 ;main.c:159: putchar('\n');
                           1627 ;     genCall
   0617 75 82 0A           1628 	mov	dpl,#0x0A
   061A C0 02              1629 	push	ar2
   061C C0 03              1630 	push	ar3
   061E C0 04              1631 	push	ar4
   0620 C0 05              1632 	push	ar5
   0622 12s00r46           1633 	lcall	_putchar
   0625 D0 05              1634 	pop	ar5
   0627 D0 04              1635 	pop	ar4
   0629 D0 03              1636 	pop	ar3
   062B D0 02              1637 	pop	ar2
                           1638 ;main.c:162: result = num1 / num2;
                           1639 ;     genAssign
   062D 85*1B*00           1640 	mov	__divsint_PARM_2,_do_the_stuff_num2_1_1
   0630 85*1C*01           1641 	mov	(__divsint_PARM_2 + 1),(_do_the_stuff_num2_1_1 + 1)
                           1642 ;     genCall
   0633 8A 82              1643 	mov	dpl,r2
   0635 8B 83              1644 	mov	dph,r3
   0637 C0 04              1645 	push	ar4
   0639 C0 05              1646 	push	ar5
   063B 12s00r00           1647 	lcall	__divsint
   063E E5 82              1648 	mov	a,dpl
   0640 85 83 F0           1649 	mov	b,dph
   0643 D0 05              1650 	pop	ar5
   0645 D0 04              1651 	pop	ar4
                           1652 ;     genAssign
   0647 FA                 1653 	mov	r2,a
   0648 AB F0              1654 	mov	r3,b
                           1655 ;main.c:163: result |= num3;
                           1656 ;     genOr
   064A EC                 1657 	mov	a,r4
   064B 42 02              1658 	orl	ar2,a
   064D ED                 1659 	mov	a,r5
   064E 42 03              1660 	orl	ar3,a
                           1661 ;main.c:164: print_the_stuff(result);
                           1662 ;     genCall
   0650 8A 82              1663 	mov	dpl,r2
   0652 8B 83              1664 	mov	dph,r3
   0654 12s03r4F           1665 	lcall	_print_the_stuff
   0657                    1666 00119$:
   0657 22                 1667 	ret
                           1668 ;------------------------------------------------------------
                           1669 ;Allocation info for local variables in function 'main'
                           1670 ;------------------------------------------------------------
                           1671 ;------------------------------------------------------------
                           1672 ;main.c:167: void main(void){
                           1673 ;	-----------------------------------------
                           1674 ;	 function main
                           1675 ;	-----------------------------------------
   0658                    1676 _main:
                           1677 ;main.c:168: SCON = 0x50;
                           1678 ;     genAssign
   0658 75 98 50           1679 	mov	_SCON,#0x50
                           1680 ;main.c:169: TMOD &=	0x0F;
                           1681 ;     genAnd
   065B 53 89 0F           1682 	anl	_TMOD,#0x0F
                           1683 ;main.c:170: TMOD |=	0x20;
                           1684 ;     genOr
   065E 43 89 20           1685 	orl	_TMOD,#0x20
                           1686 ;main.c:171: TH1 = TL1 = 253;
                           1687 ;     genAssign
   0661 75 8B FD           1688 	mov	_TL1,#0xFD
                           1689 ;     genAssign
   0664 75 8D FD           1690 	mov	_TH1,#0xFD
                           1691 ;main.c:172: TCON =	0x40;
                           1692 ;     genAssign
   0667 75 88 40           1693 	mov	_TCON,#0x40
                           1694 ;main.c:173: PCON = 0x80;
                           1695 ;     genAssign
   066A 75 87 80           1696 	mov	_PCON,#0x80
                           1697 ;main.c:179: while(1){
   066D                    1698 00102$:
                           1699 ;main.c:180: do_the_stuff();
                           1700 ;     genCall
   066D 12s04r0D           1701 	lcall	_do_the_stuff
                           1702 ;       Peephole 132   changed ljmp to sjmp
   0670 80 FB              1703 	sjmp 00102$
   0672                    1704 00104$:
   0672 22                 1705 	ret
                           1706 	.area CSEG    (CODE)
                           1707 	.area XINIT   (CODE)
